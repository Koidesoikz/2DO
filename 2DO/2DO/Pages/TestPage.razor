@page "/TestPage"

@using _2DO.Data
@using System.Diagnostics

@inject NavigationManager NavigationManager

<h3>TestPage</h3>

@if (goalList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="goalContainer">
    @foreach (Goal goal in goalList)
    {
        <input type="checkbox" checked=@goal.complete id=@goal.name @onchange="eventArgs => { CheckboxClicked(goal, eventArgs.Value); }">
        <lable for=@goal.name>@goal.name</lable>
        <img id="img-trashcan" src="images/trashcan.png" @onclick="() => RemoveSpecificGoal(goal)">
        <br />
    }
    </div>
}
<br />
<button @onclick= "() => PrintGoalListNames()">Print goalList names</button> <br />
<button @onclick="() => AddStaticGoal()">Add new static goal</button> <br />
<button @onclick="() => RemoveCompletedGoals()">Remove completed goals</button> <br />
<button @onclick="() => PrintUncompletedGoals()">Print incomplete goals</button> <br />
<br />
<button @onclick="() => CreateNewGoal()">Create new goal</button> <br />
<br />
<button @onclick="() => TestDB()">TestDB</button>
<br />
<br />
<h4>WARNING! THIS WILL DROP THE GOALS TABLE!!!</h4> <br />
<button @onclick="() => DropGoalsTable()">Drop Goals Table</button>
<br />

@code {
    public List<Goal> goalList = new List<Goal>();
    public SQLiteDB DB = new SQLiteDB();

    protected override async Task OnInitializedAsync()
    {
        //goalList.Add(new Goal("goal1"));
        //goalList.Add(new Goal("goal2"));
        //goalList.Add(new Goal("goal3"));

        goalList = await DB.GetAll<Goal>();

        foreach (Goal goal in goalList)
        {
            Debug.WriteLine("added the goal: " + goal.name);
        }
    }

    public void CheckboxClicked(Goal goal, object checkboxState)
    {
        //Add functinality
        if ((bool)checkboxState == true) {
            Debug.WriteLine($"{goal.name} was marked as completed!");
            goal.complete = true;
        } else {
            Debug.WriteLine($"{goal.name} was marked as uncompleted!");
            goal.complete = false;
        }
    }

    public async Task RemoveSpecificGoal(Goal goal) {
        bool res = await App.Current.MainPage.DisplayAlert("Delete goal", "Are you sure you want to delete " + goal.name, "Yes", "No");
        if(res) {
            await DB.DeleteGoal(goal);
            await RefreshGoalList();
        }
    }

    public async Task CreateNewGoal() {
        string res = await App.Current.MainPage.DisplayPromptAsync("Name your goal!", "Enter the goal you want to make!");
        Goal goal = new Goal(res);
        await DB.Insert<Goal>(goal);
        await RefreshGoalList();

    }

    //Test functions
    public void PrintGoalListNames() {
        Debug.WriteLine("Goals in goalList:");
        foreach (Goal goal in goalList) {
            Debug.WriteLine(goal.name);
        }
    }

    public async Task AddStaticGoal() {
        Debug.WriteLine("Adding static goal...");
        Goal goal = new Goal("staticGoal");
        await DB.Insert<Goal>(goal);
        await RefreshGoalList();
    }

    public async Task RemoveCompletedGoals() {
        foreach (Goal goal in goalList) {
            if(goal.complete) {
                Debug.WriteLine(goal.name);
                await DB.DeleteGoal(goal);
            }
        }
        await RefreshGoalList();
        //goalList.RemoveAll(x => x.complete == true);
    }

    public void PrintUncompletedGoals() {
        foreach (Goal goal in goalList) {
            if(!goal.complete) {
                Debug.WriteLine(goal.name);
            }
        }
    }

    public async Task TestDB() {
        SQLiteDB DB = new SQLiteDB();
        Debug.WriteLine("Accessing Database...");
        List<Goal> allGoals =  await DB.GetAll<Goal>();
        Debug.WriteLine("Goals acquired");


        foreach(Goal g in allGoals) {
            Debug.WriteLine("Goal Name: " + g.name);
            Debug.WriteLine("Goal Id: " + g.id);
            Debug.WriteLine("Goal Completion: " + g.complete);
            Debug.WriteLine("");
        }

        Debug.WriteLine("Post Foreach");
    }

    public async Task DropGoalsTable() {
        Debug.WriteLine("Dropping Goals Table");
        await DB.DropGoalTable();
        Debug.WriteLine("Goals Table Dropped!");

        await RefreshGoalList();
    }

    public async Task RefreshGoalList() {
        goalList.Clear();

        goalList = await DB.GetAll<Goal>();
    }

}
