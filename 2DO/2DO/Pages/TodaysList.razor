@*INJECTIONS*@
@page "/"

@using _2DO.Data
@using System.Diagnostics

@*HTML*@
<h3>TodaysList</h3>

@if(goalList == null) {
    <p><em>Loading...</em></p>
} else {
    <div class="goalContainer">
        @foreach(Goal goal in goalList) {
            <div class="goal">
                <input type="checkbox" checked=@goal.complete id=@goal.id @onchange="eventArgs => { CheckboxClicked(goal, eventArgs.Value); }">
                <lable for=@goal.name>@goal.name</lable>
                <img id="img-trashcan" src="images/trashcan.png" @onclick="() => RemoveSpecificGoal(goal)">
                <br />
            </div>
        }
    </div>   
}

<button @onclick="() => CreateNewGoal()">Create new goal</button>

<br />
<br />

<button @onclick="() => TestFunc()">Quick test meme</button>

@*CODE*@
@code {
    public SQLiteDB DB = new SQLiteDB();
    public List<Goal> goalList = new List<Goal>();

    protected override async Task OnInitializedAsync() {
        goalList = await DB.GetAllGoalsByDate(DateTime.Now);

        foreach(Goal goal in goalList) {
            Debug.WriteLine("added the goal: " + goal.name);
        }
    }

    public async Task CreateNewGoal() {
        string res = await App.Current.MainPage.DisplayPromptAsync("Name your goal!", "Enter the goal you want to fulfill!");
        Goal goal = new Goal(res, DateTime.Now);
        await DB.Insert<Goal>(goal);

    }

    public async Task CheckboxClicked(Goal goal, object checkboxState) {
        if((bool)checkboxState == true) {
            Debug.WriteLine($"{goal.name} was marked as completed!");
            goal.complete = true;
        } else {
            Debug.WriteLine($"{goal.name} was marked as uncompleted!");
            goal.complete = false;
        }
        await DB.Update<Goal>(goal);

    }

    public async Task RemoveSpecificGoal(Goal goal) {
        bool res = await App.Current.MainPage.DisplayAlert("Delete goal", "Are you sure you want to delete " + goal.name, "Yes", "No");
        if(res) {
            await DB.Delete<Goal>(goal);
        }
    }

    //TEST FUNCTION

    public void TestFunc() {
        DateTime date = DateTime.Now;

        Debug.WriteLine("DateTest: " + date.ToShortDateString());
    }

}